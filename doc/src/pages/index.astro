---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="use-simple-debounce - Simple, dependency-free debouncing for modern web development">
	<!-- Hero Section -->
	<section class="hero">
		<div class="container">
			<div class="hero-content">
				<h1 class="hero-title">
					Simple, dependency-free<br>
					<span class="hero-highlight">debouncing</span> for modern web
				</h1>
				<p class="hero-description">
					A lightweight debounce utility that works with React, Preact, Solid, Svelte, Vue, and vanilla JavaScript.
					Zero dependencies, full TypeScript support, and async function handling.
				</p>
				<div class="hero-actions">
					<a href="#installation" class="btn btn-primary">Get Started</a>
					<a href="/examples" class="btn btn-secondary">View Examples</a>
				</div>
				<div class="hero-stats">
					<div class="stat">
						<span class="stat-number">6</span>
						<span class="stat-label">Frameworks</span>
					</div>
					<div class="stat">
						<span class="stat-number">0</span>
						<span class="stat-label">Dependencies</span>
					</div>
					<div class="stat">
						<span class="stat-number">~1KB</span>
						<span class="stat-label">Bundle Size</span>
					</div>
				</div>
			</div>
			<div class="hero-visual">
				<div class="code-preview">
					<div class="code-header">
						<span class="code-language">JavaScript</span>
					</div>
					<pre class="code-content" is:raw><code>import { useDebounce } from 'use-simple-debounce';

// Create a debouncer
const debounced = useDebounce();

// Use it to debounce any function
debounced(() => {
  // This executes 300ms after the last call
  performSearch(query);
}, 300);</code></pre>
				</div>
			</div>
		</div>
	</section>

	<!-- Features Section -->
	<section class="features">
		<div class="container">
			<div class="section-header">
				<h2>Why Choose use-simple-debounce?</h2>
				<p>Built for modern web development with performance and developer experience in mind.</p>
			</div>
			<div class="features-grid">
				<div class="feature-card">
					<div class="feature-icon">üöÄ</div>
					<h3>Lightning Fast</h3>
					<p>Uses native setTimeout for reliable, high-performance debouncing with minimal overhead.</p>
				</div>
				<div class="feature-card">
					<div class="feature-icon">üéØ</div>
					<h3>Framework Agnostic</h3>
					<p>Same simple API across React, Preact, Solid, Svelte, Vue, and vanilla JavaScript.</p>
				</div>
				<div class="feature-card">
					<div class="feature-icon">üîí</div>
					<h3>TypeScript Ready</h3>
					<p>Full TypeScript support with proper type inference and comprehensive type definitions.</p>
				</div>
				<div class="feature-card">
					<div class="feature-icon">‚ö°</div>
					<h3>Async Support</h3>
					<p>Handles both synchronous and asynchronous functions with Promise support.</p>
				</div>
				<div class="feature-card">
					<div class="feature-icon">üßπ</div>
					<h3>Memory Safe</h3>
					<p>Automatic cleanup prevents memory leaks and ensures reliable operation.</p>
				</div>
				<div class="feature-card">
					<div class="feature-icon">üì¶</div>
					<h3>Zero Dependencies</h3>
					<p>No external libraries means smaller bundles and fewer security concerns.</p>
				</div>
			</div>
		</div>
	</section>

	<!-- Installation Section -->
	<section id="installation" class="installation">
		<div class="container">
			<div class="section-header">
				<h2>Installation</h2>
				<p>Get started with use-simple-debounce in your project.</p>
			</div>
			<div class="install-tabs">
				<div class="tab-buttons">
					<button class="tab-btn active" data-tab="npm">npm</button>
					<button class="tab-btn" data-tab="yarn">yarn</button>
					<button class="tab-btn" data-tab="pnpm">pnpm</button>
				</div>
				<div class="tab-content">
					<div class="tab-pane active" id="npm">
						<code class="install-code">npm install use-simple-debounce</code>
					</div>
					<div class="tab-pane" id="yarn">
						<code class="install-code">yarn add use-simple-debounce</code>
					</div>
					<div class="tab-pane" id="pnpm">
						<code class="install-code">pnpm add use-simple-debounce</code>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Framework Support Section -->
	<section class="frameworks">
		<div class="container">
			<div class="section-header">
				<h2>Framework Support</h2>
				<p>Works seamlessly with all major JavaScript frameworks and vanilla JavaScript.</p>
			</div>
			<div class="frameworks-grid">
				<div class="framework-card">
					<div class="framework-logo react-logo">‚öõÔ∏è</div>
					<h3>React</h3>
					<code class="framework-code">import { useDebounce } from 'use-simple-debounce';</code>
					<a href="/docs/react" class="framework-link">View React docs ‚Üí</a>
				</div>
				<div class="framework-card">
					<div class="framework-logo preact-logo">‚öõÔ∏è</div>
					<h3>Preact</h3>
					<code class="framework-code">import { useDebounce } from 'use-simple-debounce/preact';</code>
					<a href="/docs/preact" class="framework-link">View Preact docs ‚Üí</a>
				</div>
				<div class="framework-card">
					<div class="framework-logo solid-logo">‚¨°</div>
					<h3>Solid</h3>
					<code class="framework-code">import { createDebounce } from 'use-simple-debounce/solid';</code>
					<a href="/docs/solid" class="framework-link">View Solid docs ‚Üí</a>
				</div>
				<div class="framework-card">
					<div class="framework-logo svelte-logo">üß°</div>
					<h3>Svelte</h3>
					<code class="framework-code">import { createDebounce } from 'use-simple-debounce/svelte';</code>
					<a href="/docs/svelte" class="framework-link">View Svelte docs ‚Üí</a>
				</div>
				<div class="framework-card">
					<div class="framework-logo vue-logo">üíö</div>
					<h3>Vue</h3>
					<code class="framework-code">import { useDebounce } from 'use-simple-debounce/vue';</code>
					<a href="/docs/vue" class="framework-link">View Vue docs ‚Üí</a>
				</div>
				<div class="framework-card">
					<div class="framework-logo vanilla-logo">üü®</div>
					<h3>Vanilla JS</h3>
					<code class="framework-code">import { useDebounce } from 'use-simple-debounce/vanilla';</code>
					<a href="/docs/vanilla" class="framework-link">View Vanilla docs ‚Üí</a>
				</div>
			</div>
		</div>
	</section>

	<!-- Quick Start Section -->
	<section class="quick-start">
		<div class="container">
			<div class="section-header">
				<h2>Quick Start</h2>
				<p>See how easy it is to add debouncing to your application.</p>
			</div>
			<div class="quick-start-content">
				<div class="example-tabs">
					<div class="example-tab-buttons">
						<button class="example-tab-btn active" data-example="search">Search Input</button>
						<button class="example-tab-btn" data-example="autosave">Auto-save</button>
						<button class="example-tab-btn" data-example="api">API Calls</button>
					</div>
					<div class="example-content">
							<h4>Search Input Debouncing</h4>
							<pre is:raw><code>import { useDebounce } from 'use-simple-debounce';

function SearchComponent() {
  const debounced = useDebounce();

  const handleSearch = (query: string) => {
    debounced(() => {
      // API call happens 300ms after user stops typing
      performSearch(query);
    }, 300);
  };

  return (
    &lt;input
      type="text"
      onChange={e => handleSearch(e.target.value)}
      placeholder="Search..."
    /&gt;
  );
}</code></pre>
						<div class="example-pane" id="autosave">
							<h4>Auto-save Functionality</h4>
							<pre is:raw><code>import { useDebounce } from 'use-simple-debounce';

function AutoSaveEditor() {
  const debounced = useDebounce();

  const handleChange = (content: string) => {
    debounced(async () => {
      try {
        await saveToServer(content);
        console.log('Auto-saved!');
      } catch (err) {
        console.error('Save failed:', err);
      }
    }, 1000); // Save after 1 second of inactivity
  };

  return (
    &lt;textarea
      onChange={e => handleChange(e.target.value)}
      placeholder="Start typing..."
    /&gt;
  );
}</code></pre>
						</div>
						<div class="example-pane" id="api">
							<h4>API Call Debouncing</h4>
							<pre is:raw><code>import { useDebounce } from 'use-simple-debounce';

function UserList() {
  const [users, setUsers] = useState([]);
  const debounced = useDebounce();

  const searchUsers = async (query: string) => {
    const response = await fetch(`/api/users?q=${query}`);
    const data = await response.json();
    setUsers(data.users);
  };

  const handleSearch = (query: string) => {
    debounced(() => searchUsers(query), 300);
  };

  return (
    &lt;div&gt;
      &lt;input
        type="text"
        onChange={e => handleSearch(e.target.value)}
        placeholder="Search users..."
      /&gt;
      {users.map(user => (
        &lt;div key={user.id}&gt;{user.name}&lt;/div&gt;
      ))}
    &lt;/div&gt;
  );
}</code></pre>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- CTA Section -->
	<section class="cta">
		<div class="container">
			<div class="cta-content">
				<h2>Ready to get started?</h2>
				<p>Join thousands of developers using use-simple-debounce for better performance.</p>
				<div class="cta-actions">
					<a href="/docs" class="btn btn-primary">Read the Docs</a>
					<a href="https://github.com/juji/use-simple-debounce" class="btn btn-secondary" target="_blank" rel="noopener">
						<svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
							<path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
						</svg>
						View on GitHub
					</a>
				</div>
			</div>
		</div>
	</section>
</BaseLayout>

<style>
	/* Hero Section */
	.hero {
		padding: var(--spacing-2xl) 0;
		background: linear-gradient(135deg, var(--color-bg-primary) 0%, var(--color-bg-secondary) 100%);
		position: relative;
		overflow: hidden;
	}

	.hero::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: radial-gradient(circle at 20% 80%, rgba(0, 123, 255, 0.1) 0%, transparent 50%),
					radial-gradient(circle at 80% 20%, rgba(40, 167, 69, 0.1) 0%, transparent 50%);
		pointer-events: none;
	}

	.hero-content {
		position: relative;
		z-index: 1;
	}

	.hero-title {
		font-size: clamp(var(--font-size-3xl), 5vw, var(--font-size-4xl));
		font-weight: 700;
		line-height: 1.2;
		margin-bottom: var(--spacing-lg);
		color: var(--color-text-primary);
	}

	.hero-highlight {
		background: linear-gradient(135deg, var(--color-accent), var(--color-success));
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.hero-description {
		font-size: var(--font-size-lg);
		color: var(--color-text-secondary);
		max-width: 600px;
		margin-bottom: var(--spacing-xl);
		line-height: 1.6;
	}

	.hero-actions {
		display: flex;
		gap: var(--spacing-md);
		margin-bottom: var(--spacing-2xl);
		flex-wrap: wrap;
	}

	.hero-stats {
		display: flex;
		gap: var(--spacing-xl);
	}

	.stat {
		text-align: center;
	}

	.stat-number {
		display: block;
		font-size: var(--font-size-2xl);
		font-weight: 700;
		color: var(--color-accent);
		line-height: 1;
	}

	.stat-label {
		display: block;
		font-size: var(--font-size-sm);
		color: var(--color-text-muted);
		margin-top: var(--spacing-xs);
		text-transform: uppercase;
		letter-spacing: 0.05em;
		font-weight: 500;
	}

	.hero-visual {
		margin-top: var(--spacing-2xl);
	}

	.code-preview {
		background: var(--color-bg-primary);
		border: 1px solid var(--color-border);
		border-radius: var(--border-radius-lg);
		box-shadow: 0 10px 25px var(--color-shadow);
		overflow: hidden;
		max-width: 500px;
		margin: 0 auto;
	}

	.code-header {
		background: var(--color-bg-tertiary);
		padding: var(--spacing-sm) var(--spacing-md);
		border-bottom: 1px solid var(--color-border);
	}

	.code-language {
		font-size: var(--font-size-sm);
		font-weight: 600;
		color: var(--color-text-secondary);
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}

	.code-content {
		padding: var(--spacing-md);
		margin: 0;
		font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
		font-size: var(--font-size-sm);
		line-height: 1.5;
		color: var(--color-text-primary);
		background: var(--color-code-bg);
		overflow-x: auto;
	}

	/* Buttons */
	.btn {
		display: inline-flex;
		align-items: center;
		gap: var(--spacing-xs);
		padding: var(--spacing-sm) var(--spacing-lg);
		border-radius: var(--border-radius);
		font-weight: 600;
		font-size: var(--font-size-base);
		text-decoration: none;
		transition: all var(--transition-fast);
		cursor: pointer;
		border: none;
		text-align: center;
	}

	.btn-primary {
		background: linear-gradient(135deg, var(--color-accent), var(--color-accent-hover));
		color: white;
		box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
	}

	.btn-primary:hover {
		transform: translateY(-2px);
		box-shadow: 0 6px 16px rgba(0, 123, 255, 0.4);
	}

	.btn-secondary {
		background: var(--color-bg-tertiary);
		color: var(--color-text-primary);
		border: 1px solid var(--color-border);
	}

	.btn-secondary:hover {
		background: var(--color-bg-secondary);
		border-color: var(--color-accent);
		color: var(--color-accent);
	}

	/* Section Headers */
	.section-header {
		text-align: center;
		margin-bottom: var(--spacing-2xl);
	}

	.section-header h2 {
		font-size: var(--font-size-3xl);
		font-weight: 700;
		color: var(--color-text-primary);
		margin-bottom: var(--spacing-md);
	}

	.section-header p {
		font-size: var(--font-size-lg);
		color: var(--color-text-secondary);
		max-width: 600px;
		margin: 0 auto;
		line-height: 1.6;
	}

	/* Features Section */
	.features {
		padding: var(--spacing-2xl) 0;
		background: var(--color-bg-secondary);
	}

	.features-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: var(--spacing-xl);
	}

	.feature-card {
		background: var(--color-bg-primary);
		padding: var(--spacing-xl);
		border-radius: var(--border-radius-lg);
		border: 1px solid var(--color-border);
		text-align: center;
		transition: all var(--transition-fast);
	}

	.feature-card:hover {
		transform: translateY(-4px);
		box-shadow: 0 8px 25px var(--color-shadow);
	}

	.feature-icon {
		font-size: 2.5rem;
		margin-bottom: var(--spacing-md);
	}

	.feature-card h3 {
		font-size: var(--font-size-xl);
		font-weight: 600;
		color: var(--color-text-primary);
		margin-bottom: var(--spacing-md);
	}

	.feature-card p {
		color: var(--color-text-secondary);
		line-height: 1.6;
	}

	/* Installation Section */
	.installation {
		padding: var(--spacing-2xl) 0;
	}

	.install-tabs {
		max-width: 600px;
		margin: 0 auto;
	}

	.tab-buttons {
		display: flex;
		background: var(--color-bg-tertiary);
		border-radius: var(--border-radius) var(--border-radius) 0 0;
		border: 1px solid var(--color-border);
		border-bottom: none;
	}

	.tab-btn {
		flex: 1;
		padding: var(--spacing-sm) var(--spacing-md);
		background: none;
		border: none;
		cursor: pointer;
		font-weight: 500;
		color: var(--color-text-secondary);
		transition: all var(--transition-fast);
		border-radius: var(--border-radius) var(--border-radius) 0 0;
	}

	.tab-btn.active {
		background: var(--color-bg-primary);
		color: var(--color-text-primary);
		border-bottom: 2px solid var(--color-accent);
	}

	.tab-content {
		background: var(--color-bg-primary);
		border: 1px solid var(--color-border);
		border-radius: 0 0 var(--border-radius) var(--border-radius);
	}

	.tab-pane {
		display: none;
		padding: var(--spacing-lg);
	}

	.tab-pane.active {
		display: block;
	}

	.install-code {
		display: block;
		background: var(--color-code-bg);
		padding: var(--spacing-md);
		border-radius: var(--border-radius);
		font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
		font-size: var(--font-size-base);
		color: var(--color-text-primary);
		border: 1px solid var(--color-border);
		text-align: center;
		font-weight: 500;
	}

	/* Frameworks Section */
	.frameworks {
		padding: var(--spacing-2xl) 0;
		background: var(--color-bg-secondary);
	}

	.frameworks-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: var(--spacing-lg);
	}

	.framework-card {
		background: var(--color-bg-primary);
		padding: var(--spacing-xl);
		border-radius: var(--border-radius-lg);
		border: 1px solid var(--color-border);
		text-align: center;
		transition: all var(--transition-fast);
	}

	.framework-card:hover {
		transform: translateY(-2px);
		box-shadow: 0 6px 20px var(--color-shadow);
	}

	.framework-logo {
		font-size: 3rem;
		margin-bottom: var(--spacing-md);
	}

	.framework-card h3 {
		font-size: var(--font-size-xl);
		font-weight: 600;
		color: var(--color-text-primary);
		margin-bottom: var(--spacing-md);
	}

	.framework-code {
		display: block;
		background: var(--color-code-bg);
		padding: var(--spacing-sm) var(--spacing-md);
		border-radius: var(--border-radius);
		font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
		font-size: var(--font-size-sm);
		color: var(--color-text-secondary);
		margin-bottom: var(--spacing-md);
		border: 1px solid var(--color-border);
	}

	.framework-link {
		color: var(--color-accent);
		text-decoration: none;
		font-weight: 500;
		font-size: var(--font-size-sm);
		transition: color var(--transition-fast);
	}

	.framework-link:hover {
		color: var(--color-accent-hover);
		text-decoration: underline;
	}

	/* Quick Start Section */
	.quick-start {
		padding: var(--spacing-2xl) 0;
	}

	.quick-start-content {
		max-width: 800px;
		margin: 0 auto;
	}

	.example-tabs {
		background: var(--color-bg-primary);
		border: 1px solid var(--color-border);
		border-radius: var(--border-radius-lg);
		overflow: hidden;
		box-shadow: 0 4px 12px var(--color-shadow);
	}

	.example-tab-buttons {
		display: flex;
		background: var(--color-bg-tertiary);
		border-bottom: 1px solid var(--color-border);
	}

	.example-tab-btn {
		flex: 1;
		padding: var(--spacing-md);
		background: none;
		border: none;
		cursor: pointer;
		font-weight: 500;
		color: var(--color-text-secondary);
		transition: all var(--transition-fast);
		border-bottom: 2px solid transparent;
	}

	.example-tab-btn.active {
		background: var(--color-bg-primary);
		color: var(--color-text-primary);
		border-bottom-color: var(--color-accent);
	}

	.example-content {
		padding: var(--spacing-lg);
	}

	.example-pane {
		display: none;
	}

	.example-pane.active {
		display: block;
	}

	.example-pane h4 {
		font-size: var(--font-size-lg);
		font-weight: 600;
		color: var(--color-text-primary);
		margin-bottom: var(--spacing-md);
	}

	.example-pane pre {
		background: var(--color-code-bg);
		padding: var(--spacing-md);
		border-radius: var(--border-radius);
		border: 1px solid var(--color-border);
		overflow-x: auto;
		margin: 0;
	}

	.example-pane code {
		font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
		font-size: var(--font-size-sm);
		line-height: 1.5;
		color: var(--color-text-primary);
	}

	/* CTA Section */
	.cta {
		padding: var(--spacing-2xl) 0;
		background: linear-gradient(135deg, var(--color-accent), var(--color-accent-hover));
		color: white;
		text-align: center;
	}

	.cta-content h2 {
		font-size: var(--font-size-3xl);
		font-weight: 700;
		margin-bottom: var(--spacing-md);
		color: white;
	}

	.cta-content p {
		font-size: var(--font-size-lg);
		margin-bottom: var(--spacing-xl);
		opacity: 0.9;
		max-width: 500px;
		margin-left: auto;
		margin-right: auto;
	}

	.cta-actions {
		display: flex;
		gap: var(--spacing-md);
		justify-content: center;
		flex-wrap: wrap;
	}

	.cta .btn-primary {
		background: white;
		color: var(--color-accent);
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
	}

	.cta .btn-primary:hover {
		background: var(--color-bg-secondary);
		color: var(--color-accent);
	}

	.cta .btn-secondary {
		background: rgba(255, 255, 255, 0.1);
		color: white;
		border: 1px solid rgba(255, 255, 255, 0.3);
		backdrop-filter: blur(10px);
	}

	.cta .btn-secondary:hover {
		background: rgba(255, 255, 255, 0.2);
		border-color: rgba(255, 255, 255, 0.5);
	}

	/* Mobile Responsive Styles */
	@media (max-width: 768px) {
		.hero {
			padding: var(--spacing-xl) 0;
		}

		.hero-content {
			text-align: center;
		}

		.hero-actions {
			justify-content: center;
		}

		.hero-stats {
			justify-content: center;
			flex-wrap: wrap;
		}

		.features-grid {
			grid-template-columns: 1fr;
			gap: var(--spacing-lg);
		}

		.frameworks-grid {
			grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		}

		.example-tab-buttons {
			flex-direction: column;
		}

		.cta-actions {
			flex-direction: column;
			align-items: center;
		}

		.cta .btn {
			width: 100%;
			max-width: 300px;
		}
	}

	@media (max-width: 480px) {
		.hero-title {
			font-size: var(--font-size-2xl);
		}

		.section-header h2 {
			font-size: var(--font-size-2xl);
		}

		.frameworks-grid {
			grid-template-columns: 1fr;
		}

		.features-grid {
			grid-template-columns: 1fr;
		}

		.hero-stats {
			flex-direction: column;
			gap: var(--spacing-md);
		}
	}
</style>

<script>
	// Tab switching functionality
	document.addEventListener('DOMContentLoaded', function() {
		// Installation tabs
		const tabButtons = document.querySelectorAll('.tab-btn');
		const tabPanes = document.querySelectorAll('.tab-pane');

		tabButtons.forEach(button => {
			button.addEventListener('click', () => {
				const tabId = button.getAttribute('data-tab');

				// Remove active class from all buttons and panes
				tabButtons.forEach(btn => btn.classList.remove('active'));
				tabPanes.forEach(pane => pane.classList.remove('active'));

				// Add active class to clicked button and corresponding pane
				button.classList.add('active');
				document.getElementById(tabId)?.classList.add('active');
			});
		});

		// Example tabs
		const exampleTabButtons = document.querySelectorAll('.example-tab-btn');
		const examplePanes = document.querySelectorAll('.example-pane');

		exampleTabButtons.forEach(button => {
			button.addEventListener('click', () => {
				const exampleId = button.getAttribute('data-example');

				// Remove active class from all buttons and panes
				exampleTabButtons.forEach(btn => btn.classList.remove('active'));
				examplePanes.forEach(pane => pane.classList.remove('active'));

				// Add active class to clicked button and corresponding pane
				button.classList.add('active');
				document.getElementById(exampleId)?.classList.add('active');
			});
		});
	});
</script>
